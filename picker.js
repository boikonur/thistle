// Generated by CoffeeScript 1.4.0
(function() {
  var fmod, hslToCSS, hslToRGB, hueToRGB, knob, makeHSLCircle, makeHSLRef, makePicker, map, rgbToHSL, style,
    __slice = [].slice;

  hueToRGB = function(m1, m2, h) {
    h = h < 0 ? h + 1 : h > 1 ? h - 1 : h;
    if (h * 6 < 1) {
      return m1 + (m2 - m1) * h * 6;
    }
    if (h * 2 < 1) {
      return m2;
    }
    if (h * 3 < 2) {
      return m1 + (m2 - m1) * (0.66666 - h) * 6;
    }
    return m1;
  };

  hslToRGB = function(h, s, l) {
    var m1, m2;
    m2 = l <= 0.5 ? l * (s + 1) : l + s - l * s;
    m1 = l * 2 - m2;
    return {
      r: hueToRGB(m1, m2, h + 0.33333),
      g: hueToRGB(m1, m2, h),
      b: hueToRGB(m1, m2, h - 0.33333)
    };
  };

  rgbToHSL = function(r, g, b) {
    var diff, h, l, max, min, s, sum;
    max = Math.max(r, g, b);
    min = Math.min(r, g, b);
    diff = max - min;
    sum = max + min;
    h = min === max ? 0 : r === max ? ((60 * (g - b) / diff) + 360) % 360 : g === max ? (60 * (b - r) / diff) + 120 : (60 * (r - g) / diff) + 240;
    l = sum / 2;
    s = l === 0 ? 0 : l === 1 ? 1 : l <= 0.5 ? diff / sum : diff / (2 - sum);
    return {
      h: h,
      s: s,
      l: l
    };
  };

  style = function(tag, styles) {
    var n, v, _results;
    _results = [];
    for (n in styles) {
      v = styles[n];
      _results.push(tag.style[n] = v);
    }
    return _results;
  };

  fmod = function(x, m) {
    x = x % m;
    if (x < 0) {
      x += m;
    }
    return x;
  };

  map = function(v, min, max) {
    return min + (max - min) * Math.min(1, Math.max(0, v));
  };

  makeHSLRef = function(radius, width, lightness) {
    var b, canvas, ctx, d, data, dx, dy, g, h, imgdata, r, s, x, y, _i, _j, _ref, _ref1, _ref2;
    if (lightness == null) {
      lightness = 0.5;
    }
    canvas = document.createElement('canvas');
    canvas.width = canvas.height = radius * 2;
    ctx = canvas.getContext('2d');
    imgdata = ctx.createImageData(canvas.width, canvas.height);
    data = imgdata.data;
    for (y = _i = 0, _ref = canvas.height; 0 <= _ref ? _i < _ref : _i > _ref; y = 0 <= _ref ? ++_i : --_i) {
      for (x = _j = 0, _ref1 = canvas.width; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; x = 0 <= _ref1 ? ++_j : --_j) {
        dy = y - radius;
        dx = x - radius;
        d = Math.sqrt(dy * dy + dx * dx);
        if (d > radius + 1.5) {
          continue;
        }
        d -= 10;
        s = Math.max(0, Math.min(1, d / (radius - width / 2 - 10)));
        h = Math.atan2(dy, dx) / (Math.PI * 2);
        _ref2 = hslToRGB(h, s, lightness), r = _ref2.r, g = _ref2.g, b = _ref2.b;
        data[(y * canvas.width + x) * 4 + 0] = r * 255;
        data[(y * canvas.width + x) * 4 + 1] = g * 255;
        data[(y * canvas.width + x) * 4 + 2] = b * 255;
        data[(y * canvas.width + x) * 4 + 3] = 255;
      }
    }
    ctx.putImageData(imgdata, 0, 0);
    canvas._radius = radius;
    canvas._width = width;
    return canvas;
  };

  makeHSLCircle = function(ref, s) {
    var canvas, ctx, r, radius, width;
    radius = ref._radius;
    width = ref._width;
    r = map(s, width, radius);
    canvas = document.createElement('canvas');
    canvas.width = canvas.height = radius * 2;
    ctx = canvas.getContext('2d');
    ctx.fillStyle = 'rgba(0,0,0,0.3)';
    ctx.beginPath();
    ctx.arc(radius, radius, radius, 0, Math.PI * 2);
    ctx.fill();
    ctx.fillStyle = 'black';
    ctx.beginPath();
    ctx.arc(radius, radius, r, 0, Math.PI * 2);
    ctx.arc(radius, radius, r - width, 0, Math.PI * 2, true);
    ctx.fill();
    ctx.globalCompositeOperation = 'source-in';
    ctx.drawImage(ref, 0, 0);
    return canvas;
  };

  knob = function(size) {
    var el;
    el = document.createElement('div');
    el.className = 'knob';
    style(el, {
      position: 'absolute',
      width: size + 'px',
      height: size + 'px',
      backgroundColor: 'red',
      borderRadius: Math.floor(size / 2) + 'px',
      cursor: 'pointer',
      backgroundImage: '-webkit-gradient(radial, 50% 0%, 0, 50% 0%, 15, color-stop(0%, rgba(255, 255, 255, 0.8)), color-stop(100%, rgba(255, 255, 255, 0.2)))',
      boxShadow: 'white 0px 1px 1px inset, rgba(0, 0, 0, 0.4) 0px -1px 1px inset, rgba(0, 0, 0, 0.4) 0px 1px 4px 0px, rgba(0, 0, 0, 0.6) 0 0 2px'
    });
    style(el, {
      backgroundImage: 'radial-gradient(circle at center top, rgba(255,255,255,0.8), rgba(255, 255, 255, 0.2) 15px'
    });
    return el;
  };

  hslToCSS = function(h, s, l, a) {
    if (a != null) {
      return 'hsla(' + Math.round(h * 180 / Math.PI) + ',' + Math.round(s * 100) + '%,' + Math.round(l * 100) + '%,' + a + ')';
    } else {
      return 'hsl(' + Math.round(h * 180 / Math.PI) + ',' + Math.round(s * 100) + '%,' + Math.round(l * 100) + '%)';
    }
  };

  makePicker = function(color) {
    var attachSaturationControl, circle, circleContainer, colorPreview, currentH, currentL, currentS, div, hsl, k, lKnob, lSlider, listeners, originalColor, originalColorTransparent, picker, radius, ref, setH, setL, setS, width;
    if (color == null) {
      color = {
        h: 180,
        s: 1,
        l: 0.5
      };
    }
    radius = 80;
    width = 25;
    currentH = Math.PI;
    currentS = 1;
    currentL = 0.5;
    if ((color.r != null) && (color.g != null) && (color.b != null)) {
      hsl = rgbToHSL(color.r, color.g, color.b);
      currentH = hsl.h * Math.PI / 180;
      currentS = hsl.s;
      currentL = hsl.l;
    } else if ((color.h != null) && (color.s != null) && (color.l != null)) {
      currentH = color.h * Math.PI / 180;
      currentS = color.s;
      currentL = color.l;
    }
    originalColor = hslToCSS(currentH, currentS, currentL);
    originalColorTransparent = hslToCSS(currentH, currentS, currentL, 0);
    div = document.createElement('div');
    div.className = 'picker';
    style(div, {
      display: 'inline-block',
      background: 'hsl(0, 0%, 97%)',
      padding: '6px',
      borderRadius: '6px',
      boxShadow: '1px 1px 5px hsla(0, 0%, 39%, 0.2), hsla(0, 0%, 100%, 0.9) 0px 0px 1em 0.3em inset',
      border: '1px solid hsla(0, 0%, 59%, 0.2)',
      position: 'absolute',
      backgroundImage: '-webkit-linear-gradient(left top, hsla(0, 0%, 0%, 0.05) 25%, transparent 25%, transparent 50%, hsla(0, 0%, 0%, 0.05) 50%, hsla(0, 0%, 0%, 0.05) 75%, transparent 75%, transparent)',
      backgroundSize: '40px 40px'
    });
    style(div, {
      backgroundImage: '-moz-linear-gradient(left top, hsla(0, 0%, 0%, 0.05) 25%, transparent 25%, transparent 50%, hsla(0, 0%, 0%, 0.05) 50%, hsla(0, 0%, 0%, 0.05) 75%, transparent 75%, transparent)'
    });
    ref = makeHSLRef(radius, width);
    circle = makeHSLCircle(ref, 1);
    circleContainer = document.createElement('div');
    style(circleContainer, {
      display: 'inline-block',
      width: radius * 2 + 'px',
      height: radius * 2 + 'px',
      borderRadius: radius + 'px',
      boxShadow: '0px 0px 7px rgba(0,0,0,0.3)'
    });
    circleContainer.appendChild(circle);
    div.appendChild(circleContainer);
    lSlider = div.appendChild(document.createElement('div'));
    style(lSlider, {
      display: 'inline-block',
      width: '20px',
      height: radius * 2 - 22 + 'px',
      marginLeft: '6px',
      borderRadius: '10px',
      boxShadow: 'hsla(0, 100%, 100%, 0.1) 0 1px 2px 1px inset, hsla(0, 100%, 100%, 0.2) 0 1px inset, hsla(0, 0%, 0%, 0.4) 0 -1px 1px inset, hsla(0, 0%, 0%, 0.4) 0 1px 1px',
      position: 'relative',
      top: '-11px'
    });
    lSlider._height = radius * 2 - 22;
    lKnob = knob(22);
    style(lKnob, {
      left: '-1px'
    });
    lSlider.appendChild(lKnob);
    colorPreview = document.createElement('div');
    div.appendChild(colorPreview);
    style(colorPreview, {
      boxShadow: 'hsla(0, 0%, 0%, 0.5) 0 1px 5px, hsla(0, 100%, 100%, 0.4) 0 1px 1px inset, hsla(0, 0%, 0%, 0.3) 0 -1px 1px inset',
      height: '25px',
      marginTop: '6px',
      borderRadius: '3px',
      backgroundImage: '-webkit-linear-gradient(-20deg, ' + originalColorTransparent + ', ' + originalColorTransparent + ' 69%, ' + originalColor + ' 70%, ' + originalColor + ')'
    });
    style(colorPreview, {
      backgroundImage: '-moz-linear-gradient(-20deg, ' + originalColorTransparent + ', ' + originalColorTransparent + ' 69%, ' + originalColor + ' 70%, ' + originalColor + ')'
    });
    k = knob(27);
    circleContainer.appendChild(k);
    setH = function(h) {
      var b, oR, r;
      r = map(currentS, width, radius) - width / 2;
      oR = radius - width / 2;
      k.style.left = Math.round(oR + Math.cos(h) * r + 6 - 1) + 'px';
      k.style.top = Math.round(oR + Math.sin(h) * r + 6 - 1) + 'px';
      currentH = h;
      k.style.backgroundColor = hslToCSS(currentH, currentS, currentL);
      colorPreview.style.backgroundColor = lKnob.style.backgroundColor = k.style.backgroundColor;
      picker.emit('changed');
      b = hslToCSS(currentH, currentS, 0.5);
      lSlider.style.backgroundImage = '-webkit-linear-gradient(bottom, black, ' + b + ' 50%, white)';
      return lSlider.style.backgroundImage = '-moz-linear-gradient(bottom, black, ' + b + ' 50%, white)';
    };
    setS = function(s) {
      var newCircle;
      newCircle = makeHSLCircle(ref, s);
      circleContainer.replaceChild(newCircle, circle);
      circle = newCircle;
      currentS = s;
      return setH(currentH);
    };
    setL = function(l) {
      ref = makeHSLRef(radius, width, l);
      currentL = l;
      lKnob.style.top = (1 - l) * lSlider._height - 11 + 'px';
      return setS(currentS);
    };
    lKnob.onmousedown = function(e) {
      var move, up;
      document.documentElement.style.cursor = 'pointer';
      window.addEventListener('mousemove', move = function(e) {
        var r, y;
        r = lSlider.getBoundingClientRect();
        y = e.clientY - r.top;
        return setL(Math.max(0, Math.min(1, 1 - (y / lSlider._height))));
      });
      window.addEventListener('mouseup', up = function(e) {
        window.removeEventListener('mousemove', move);
        window.removeEventListener('mouseup', up);
        window.removeEventListener('blur', up);
        return document.documentElement.style.cursor = '';
      });
      window.addEventListener('blur', up);
      e.preventDefault();
      return e.stopPropagation();
    };
    attachSaturationControl = function(c) {
      var updateCursor;
      updateCursor = function(e) {
        var d, dx, dy, r, t, x, y;
        x = e.layerX;
        y = e.layerY;
        dx = x - radius;
        dy = y - radius;
        d = Math.sqrt(dx * dx + dy * dy);
        t = Math.atan2(dy, dx);
        r = map(currentS, width, radius);
        if ((r - width < d && d < r)) {
          if ((-Math.PI / 8 < t && t < Math.PI / 8) || t >= 7 * Math.PI / 8 || t <= -7 * Math.PI / 8) {
            return c.style.cursor = 'ew-resize';
          } else if ((Math.PI / 8 <= t && t < 3 * Math.PI / 8) || (-7 * Math.PI / 8 < t && t <= -5 * Math.PI / 8)) {
            return c.style.cursor = 'nwse-resize';
          } else if ((3 * Math.PI / 8 <= t && t < 5 * Math.PI / 8) || (-5 * Math.PI / 8 < t && t <= -3 * Math.PI / 8)) {
            return c.style.cursor = 'ns-resize';
          } else if ((5 * Math.PI / 8 <= t && t < 7 * Math.PI / 8) || (-3 * Math.PI / 8 < t && t <= -Math.PI / 8)) {
            return c.style.cursor = 'nesw-resize';
          }
        } else {
          return c.style.cursor = '';
        }
      };
      c.addEventListener('mouseover', function(e) {
        var move, out;
        updateCursor(e);
        c.addEventListener('mousemove', move = function(e) {
          return updateCursor(e);
        });
        return c.addEventListener('mouseout', out = function(e) {
          c.style.cursor = '';
          c.removeEventListener('mousemove', move);
          return c.removeEventListener('mouseout', out);
        });
      });
      return c.addEventListener('mousedown', function(e) {
        var d, dx, dy, move, r, t, up, x, y;
        e.preventDefault();
        x = e.layerX;
        y = e.layerY;
        dx = x - radius;
        dy = y - radius;
        d = Math.sqrt(dx * dx + dy * dy);
        t = Math.atan2(dy, dx);
        r = map(currentS, width, radius);
        if (!((r - width < d && d < r))) {
          return;
        }
        document.documentElement.style.cursor = c.style.cursor;
        window.addEventListener('mousemove', move = function(e) {
          var cx, cy, s;
          r = circle.getBoundingClientRect();
          cx = r.left + r.width / 2;
          cy = r.top + r.height / 2;
          dx = e.clientX - cx;
          dy = e.clientY - cy;
          d = Math.sqrt(dx * dx + dy * dy);
          d -= 10;
          s = Math.max(0, Math.min(1, d / (radius - width / 2 - 10)));
          return setS(s);
        });
        window.addEventListener('mouseup', up = function(e) {
          window.removeEventListener('mousemove', move);
          window.removeEventListener('mouseup', up);
          window.removeEventListener('blur', up);
          return document.documentElement.style.cursor = '';
        });
        return window.addEventListener('blur', up);
      });
    };
    attachSaturationControl(circleContainer);
    k.onmousedown = function(e) {
      var move, up;
      document.documentElement.style.cursor = 'pointer';
      window.addEventListener('mousemove', move = function(e) {
        var cx, cy, r;
        r = circle.getBoundingClientRect();
        cx = r.left + r.width / 2;
        cy = r.top + r.height / 2;
        return setH(Math.atan2(e.clientY - cy, e.clientX - cx));
      });
      window.addEventListener('mouseup', up = function(e) {
        window.removeEventListener('mousemove', move);
        window.removeEventListener('mouseup', up);
        window.removeEventListener('blur', up);
        return document.documentElement.style.cursor = '';
      });
      window.addEventListener('blur', up);
      e.preventDefault();
      return e.stopPropagation();
    };
    listeners = {};
    picker = {
      el: div,
      on: function(e, l) {
        var _ref;
        return ((_ref = listeners[e]) != null ? _ref : listeners[e] = []).push(l);
      },
      emit: function() {
        var args, e, l, _i, _len, _ref, _ref1, _results;
        e = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        _ref1 = (_ref = listeners[e]) != null ? _ref : [];
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          l = _ref1[_i];
          _results.push(l.call.apply(l, [this].concat(__slice.call(args))));
        }
        return _results;
      },
      removeListener: function(e, l) {
        if (listeners[e]) {
          return listeners[e] = (function() {
            var _i, _len, _ref, _results;
            _ref = listeners[e];
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              k = _ref[_i];
              if (k !== l) {
                _results.push(k);
              }
            }
            return _results;
          })();
        }
      },
      set: function(h, s, l) {
        currentH = fmod(h, 360) * Math.PI / 180;
        currentS = Math.max(0, Math.min(1, s));
        currentL = Math.max(0, Math.min(1, l));
        return setL(l);
      }
    };
    Object.defineProperty(picker, 'hsl', {
      get: function() {
        return {
          h: fmod(currentH * 180 / Math.PI, 360),
          s: currentS,
          l: currentL
        };
      },
      set: function(_arg) {
        var h, l, s;
        h = _arg.h, s = _arg.s, l = _arg.l;
        return this.set(h, s, l);
      }
    });
    Object.defineProperty(picker, 'rgb', {
      get: function() {
        return hslToRGB(currentH / (Math.PI * 2), currentS, currentL);
      },
      set: function(_arg) {
        var b, g, h, l, r, s, _ref;
        r = _arg.r, g = _arg.g, b = _arg.b;
        _ref = rgbToHSL(r, g, b), h = _ref.h, s = _ref.s, l = _ref.l;
        return this.set(h * Math.PI / 180, s, l);
      }
    });
    picker.set(currentH * 180 / Math.PI, currentS, currentL);
    return picker;
  };

  window.makePicker = makePicker;

}).call(this);
